class PlayerInventoryView(LoginRequiredMixin, FormMixin, ListView):
    model = InventoryObject
    template_name = "inventory.html"
    form_class = AddTradeForm

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['Background'] = BackgroundImageBase.objects.filter(is_active=1, page=self.template_name).order_by(
            "position")
        context['PostBackgroundImage'] = PostBackgroundImage.objects.all()
        context['BaseCopyrightTextFielded'] = BaseCopyrightTextField.objects.filter(is_active=1)
        context['Titles'] = Titled.objects.filter(is_active=1, page=self.template_name).order_by("position")
        context['Header'] = NavBarHeader.objects.filter(is_active=1).order_by("row")
        context['DropDown'] = NavBar.objects.filter(is_active=1).order_by('position')
        context['Stockpile'] = Inventory.objects.filter(is_active=1, user=self.request.user)
        try:
            context['SentProfile'] = UserProfile.objects.get(user=self.request.user)
        except UserProfile.DoesNotExist:
            context['SentProfile'] = None
        context['Money'] = Currency.objects.filter(is_active=1)
        context['StockObject'] = InventoryObject.objects.filter(is_active=1, user=self.request.user)
        context['TradeItems'] = TradeItem.objects.filter(is_active=1, user=self.request.user)
        context['TextFielde'] = TextBase.objects.filter(is_active=1, page=self.template_name).order_by("section")

        if self.request.user.is_authenticated:
            userprofile = ProfileDetails.objects.filter(is_active=1, user=self.request.user)
        else:
            userprofile = None

        if userprofile:
            context['Profiles'] = userprofile
        else:
            context['Profiles'] = None

        if context['Profiles'] == None:
            # Create a new object with the necessary attributes
            userprofile = type('', (), {})()
            userprofile.newprofile_profile_picture_url = 'static/css/images/a.jpg'
            userprofile.newprofile_profile_url = None
        else:
            for userprofile in context['Profiles']:
                user = userprofile.user
                profile = ProfileDetails.objects.filter(user=user).first()
                if profile:
                    userprofile.newprofile_profile_picture_url = profile.avatar.url
                    userprofile.newprofile_profile_url = userprofile.get_profile_url()
        return context

    @method_decorator(login_required)
    def post(self, request, pk, *args, **kwargs):
        # Get the InventoryObject instance by primary key (pk)
        inventory_object = get_object_or_404(InventoryObject, pk=pk)

        action = self.request.POST.get('action')

        if action == 'sell':
            return self.sell_inventory_object(request, pk)
        elif action == 'withdraw':
            return self.withdraw_inventory_object(request, pk)
        elif action == 'move':
            print("Move action triggered")  # Debugging line
            return self.move_to_trade(request, pk)
        else:
            return HttpResponse(status=400)  # Bad request if action is unknown

    def withdraw_inventory_object(self, request, pk):
        inventory_object = get_object_or_404(InventoryObject, pk=pk)

        # Check if user owns the inventory object
        if inventory_object.user != request.user:
            messages.error(request, 'You cannot withdraw items you do not own!')
            return redirect('showcase:inventory')

        user = request.user

        with transaction.atomic():
            # Find or create a withdrawal
            withdraw = Withdraw.objects.filter(user=user, is_active=1, shipping_state='S',
                                               number_of_cards__lt=25).first()
            if not withdraw:
                withdraw = Withdraw.objects.create(user=user, is_active=1, shipping_state='P')

            # Add inventory object to withdrawal
            withdraw.cards.add(inventory_object)
            withdraw.number_of_cards = withdraw.cards.count()
            withdraw.save()

            # Update InventoryObject
            inventory_object.user = None
            inventory_object.inventory = None
            inventory_object.save()

        messages.success(request, f"Successfully withdrawn {inventory_object.choice_text}!")
        return redirect('showcase:inventory')

    def sell_inventory_object(self, request, pk):
        inventory_object = get_object_or_404(InventoryObject, pk=pk)

        # Check if user owns the inventory object
        if inventory_object.user != request.user:
            messages.error(request, 'You cannot sell items you do not own!')
            return redirect('showcase:inventory')

        # Update InventoryObject
        inventory_object.user = None
        inventory_object.inventory = None

        with transaction.atomic():
            # Create the Transaction instance
            Transaction.objects.create(
                inventory_object=inventory_object,
                user=request.user,
                currency=inventory_object.currency,
                amount=inventory_object.price
            )

            # Save the updated InventoryObject
            inventory_object.save()

            # Update UserProfile's currency_amount
            user_profile = get_object_or_404(ProfileDetails, user=request.user)
            user_profile.currency_amount += inventory_object.price
            user_profile.save()

        messages.success(request,
                         f"Successfully sold {inventory_object.choice} for {inventory_object.price} {inventory_object.currency}!")
        return redirect('showcase:inventory')

    def move_to_trade(self, request, pk):
        # Fetch the InventoryObject based on pk
        inventory_object = get_object_or_404(InventoryObject, pk=pk)

        # Check if user owns the inventory object
        if inventory_object.user != request.user:
            messages.error(request, 'You cannot trade using items you do not own!')
            return redirect('showcase:inventory')

        user = request.user

        with transaction.atomic():
            # Find or create a TradeItem
            tradeitem = TradeItem.objects.filter(user=user, is_active=1).first()
            if not tradeitem:
                tradeitem = TradeItem.objects.create(
                    user=user,
                    title=inventory_object.choice_text,
                    category=inventory_object.category,
                    is_active=1,
                    currency=inventory_object.currency,
                    value=inventory_object.price,
                    condition=inventory_object.condition,
                    certified=True,
                    image=inventory_object.image,
                    image_length=inventory_object.image_length,
                    image_width=inventory_object.image_width,
                    length_for_resize=inventory_object.length_for_resize,
                    width_for_resize=inventory_object.width_for_resize,
                )

            tradeitem.save()

            # Update InventoryObject (e.g., move to trade inventory)
            inventory_object.delete()

            messages.success(request, f"TradeItem created with ID: {tradeitem.id}")
            return redirect('showcase:tradeinventory')


    def remove_trade_object(self, request, pk):
        trade_item = get_object_or_404(TradeItem, pk=pk)

        if trade_item.user != request.user:
            messages.error(request, 'You cannot remove tradable items you do not own!')
            return redirect('showcase:tradeinventory')

        trade_item.user = None
        trade_item.inventory = None
        trade_item.save()

        messages.success(request, f"Successfully removed {trade_item.title}!")
        return redirect('showcase:inventory')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)